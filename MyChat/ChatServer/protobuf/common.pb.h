// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class User;
class UserLoginRequest;

enum UserLoginRequest_MSGID {
  UserLoginRequest_MSGID_ID = 102
};
bool UserLoginRequest_MSGID_IsValid(int value);
const UserLoginRequest_MSGID UserLoginRequest_MSGID_MSGID_MIN = UserLoginRequest_MSGID_ID;
const UserLoginRequest_MSGID UserLoginRequest_MSGID_MSGID_MAX = UserLoginRequest_MSGID_ID;
const int UserLoginRequest_MSGID_MSGID_ARRAYSIZE = UserLoginRequest_MSGID_MSGID_MAX + 1;

// ===================================================================

class User : public ::google::protobuf::MessageLite {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const User& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const User* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:message.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::MessageLite {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UserLoginRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UserLoginRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UserLoginRequest* other);

  // implements Message ----------------------------------------------

  UserLoginRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef UserLoginRequest_MSGID MSGID;
  static const MSGID ID = UserLoginRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return UserLoginRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    UserLoginRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    UserLoginRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    UserLoginRequest_MSGID_MSGID_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bytes login_name = 2;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 2;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const void* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // optional bytes login_password = 3;
  inline bool has_login_password() const;
  inline void clear_login_password();
  static const int kLoginPasswordFieldNumber = 3;
  inline const ::std::string& login_password() const;
  inline void set_login_password(const ::std::string& value);
  inline void set_login_password(const char* value);
  inline void set_login_password(const void* value, size_t size);
  inline ::std::string* mutable_login_password();
  inline ::std::string* release_login_password();
  inline void set_allocated_login_password(::std::string* login_password);

  // @@protoc_insertion_point(class_scope:message.UserLoginRequest)
 private:
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_login_password();
  inline void clear_has_login_password();

  ::std::string* login_name_;
  ::std::string* login_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_common_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_common_2eproto();
  #endif
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static UserLoginRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// required int32 id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 User::id() const {
  return id_;
}
inline void User::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool User::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& User::name() const {
  return *name_;
}
inline void User::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* User::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void User::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserLoginRequest

// optional bytes login_name = 2;
inline bool UserLoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& UserLoginRequest::login_name() const {
  return *login_name_;
}
inline void UserLoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
}
inline void UserLoginRequest::set_login_name(const void* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    login_name_ = new ::std::string;
  }
  return login_name_;
}
inline ::std::string* UserLoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::kEmptyString) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes login_password = 3;
inline bool UserLoginRequest::has_login_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequest::set_has_login_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequest::clear_has_login_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequest::clear_login_password() {
  if (login_password_ != &::google::protobuf::internal::kEmptyString) {
    login_password_->clear();
  }
  clear_has_login_password();
}
inline const ::std::string& UserLoginRequest::login_password() const {
  return *login_password_;
}
inline void UserLoginRequest::set_login_password(const ::std::string& value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
}
inline void UserLoginRequest::set_login_password(const char* value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
}
inline void UserLoginRequest::set_login_password(const void* value, size_t size) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_login_password() {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    login_password_ = new ::std::string;
  }
  return login_password_;
}
inline ::std::string* UserLoginRequest::release_login_password() {
  clear_has_login_password();
  if (login_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_password_;
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLoginRequest::set_allocated_login_password(::std::string* login_password) {
  if (login_password_ != &::google::protobuf::internal::kEmptyString) {
    delete login_password_;
  }
  if (login_password) {
    set_has_login_password();
    login_password_ = login_password;
  } else {
    clear_has_login_password();
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
